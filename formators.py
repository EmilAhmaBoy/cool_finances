import time
import datetime
import sqlite3
import math

categories = {
    'transaction_category_job': 'üíº –†–∞–±–æ—Ç–∞',
    'transaction_category_gift': 'üéÅ –ü–æ–¥–∞—Ä–æ–∫',
    'transaction_category_pocket_money': 'üìî –ö–∞—Ä–º–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏',
    'transaction_category_win': 'üí∏ –í—ã–∏–≥—Ä—ã—à / –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥',
    'transaction_category_entertainment': 'üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
    'transaction_category_food': 'üçî –ï–¥–∞',
    'transaction_category_knowledges': 'üéì –£—á—ë–±–∞',
    'transaction_category_item': 'üö≤ –í–µ—â—å',
    'transaction_category_transport': 'üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    'transaction_category_products': 'üçé –ü—Ä–æ–¥—É–∫—Ç—ã',
    'transaction_category_clothes': 'üëï –û–¥–µ–∂–¥–∞'
}


def earnings_formator(message, user_cache):
    try:
        if 'transaction_clear' in user_cache.keys():
            with sqlite3.connect('users.db') as db:
                cursor = db.cursor()
                if user_cache['transaction_clear'] == '*':
                    command = """
                    DELETE FROM transactions WHERE user_id = ?
                    """
                    cursor.execute(command, [message.from_user.id])
                else:
                    command = """
                    SELECT * FROM transactions WHERE user_id = ? AND date = ?
                    """
                    transactions = list(cursor.execute(command, [message.from_user.id, time.strftime('%m.%Y')]))
                    transaction_id = transactions[user_cache['transaction_clear'] - 1][0]
                    command = """
                    DELETE FROM transactions WHERE id = ?
                    """
                    cursor.execute(command, [transaction_id])
                cursor.close()
                db.commit()
        if 'category' in user_cache.keys() and 'cost' in user_cache.keys() and 'multy' in user_cache.keys():
            with sqlite3.connect('users.db') as db:
                cursor = db.cursor()
                command = """
                INSERT INTO transactions (user_id, cost, date, day, category) VALUES (?, ?, ?, ?, ?)
                """
                cursor.execute(command, [message.from_user.id,
                                         user_cache['cost'] * user_cache['multy'],
                                         time.strftime('%m.%Y'),
                                         (datetime.date.today() - datetime.date(2023, 1, 1)).days,
                                         user_cache['category']])
                cursor.close()
                db.commit()
    finally:
        try:
            del user_cache['transaction_clear']
        except KeyError:
            pass

        try:
            del user_cache['multy']
            del user_cache['cost']
            del user_cache['category']
        except KeyError:
            pass

        with sqlite3.connect('users.db') as db:
            cursor = db.cursor()
            transactions = list(cursor.execute('SELECT * FROM transactions WHERE user_id = ? AND date = ?',
                                               [message.from_user.id, time.strftime('%m.%Y')]))
            cursor.close()

        if len(transactions) > 0:
            text = 'üßê –í—Å–µ —Ç–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ç—É—Ç:\n\n'
            money = 0
            index = 0
            last_date = None
            for transaction in transactions:
                day = transaction[4]
                date = datetime.date(2023, 1, 1) + datetime.timedelta(days=day)
                money += transaction[2]
                if last_date != date:
                    last_date = date
                    text = text + f'‚Ä¢ –î–∞—Ç–∞: *{date.strftime("%d.%m.%Y")}*\n'
                if transaction[2] > 0:
                    text = text + f'*{index + 1}.* üìà –î–æ—Ö–æ–¥ –Ω–∞ —Å—É–º–º—É –≤ *{str(transaction[2])}* —Ä—É–±.'
                else:
                    text = text + f'*{index + 1}.* üìâ –†–∞—Å—Ö–æ–¥ –Ω–∞ —Å—É–º–º—É –≤ *{str(- transaction[2])}* —Ä—É–±.'
                text = text + f' ({categories[transaction[5]]})\n'
                index += 1
            text = text + f'\n\nüòâ –ò—Ç–æ–≥–æ: _—É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å_ *{str(money)}* _—Ä—É–±–ª–µ–π_'
        else:
            text = '–ò—Å—Ç–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—É—Å—Ç–∞ üò•'

        return text


def transaction_formator(message, user_cache):
    text = 'ü§ù –ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥, –≤—Ö–æ–¥—è—â–∏—Ö –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.'

    if message.text == 'üìâ –í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥':
        user_cache['multy'] = -1
    else:
        user_cache['multy'] = 1

    return text


def transaction_category_formator(message, user_cache):
    if user_cache['multy'] == 1:
        buttons = ['transaction_category_job',
                   'transaction_category_gift',
                   'transaction_category_pocket_money',
                   'transaction_category_win']
    else:
        buttons = ['transaction_category_entertainment',
                   'transaction_category_food',
                   'transaction_category_knowledges',
                   'transaction_category_item',
                   'transaction_category_transport',
                   'transaction_category_products',
                   'transaction_category_clothes']

    buttons.append('transaction_back')

    return buttons


def analyse_formator(message, user_cache):
    with sqlite3.connect('users.db') as db:
        cursor = db.cursor()
        command = """
        SELECT * FROM transactions WHERE user_id = ? ORDER BY id DESC LIMIT 50
        """
        transactions = list(cursor.execute(command, [message.from_user.id]))
        dreams = list(cursor.execute('SELECT * FROM dreams WHERE user_id = ? ORDER BY priority ASC LIMIT 1',
                                     [message.from_user.id]))
        dream = None
        if len(dreams) > 0:
            dream = dreams[0]
        cursor.close()

        start_index = None
        if len(transactions) > 8:
            index = 8
            for transaction in transactions[8:]:
                if transaction[2] > 0:
                    while index + 1 < len(transactions) and transactions[index + 1][2] > 0:
                        index += 1
                    start_index = index
                    day = transactions[index][4]
                    analyse_transactions = transactions[:index + 1]

                    break
                index += 1

    transactions.reverse()

    if start_index is not None:
        payouts = {}
        index = 0
        for transaction in transactions:
            if transaction[2] < 0:
                if transaction[5] not in payouts.keys():
                    payouts[transaction[5]] = 0
                payouts[transaction[5]] -= transaction[2]

            index += 1

        balance = 0
        money_triggered = 0
        for transaction in analyse_transactions:
            balance += transaction[2]
            money_triggered += abs(transaction[2])

        money_percent = balance / money_triggered

        text = '*–ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–∫–∞–∑–∞–ª:*\n'

        # –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        if money_percent < 0:
            text = text + f'üí° –¢–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–µ–≤—ã—à–∞—Ç—å –¥–æ—Ö–æ–¥—ã (–Ω–∞ {abs(balance)} —Ä—É–±–ª–µ–π)! –°—Ç–∞—Ä–∞–π—Å—è –±–æ–ª—å—à–µ —ç–∫–æ–Ω–æ–º–∏—Ç—å –∏ –º–µ–Ω—å—à–µ —Ç—Ä–∞—Ç–∏—Ç—å!\n'
            if dream is not None:
                text = text + 'üí° –¢—ã –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–∫–æ–ø–∏—Ç—å –¥–µ–Ω–µ–≥ –Ω–∞ –∂–µ–ª–∞–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–æ—Ö–æ–¥–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏!\n'
        elif money_percent < 0.1:
            text = text + 'üí° –¢–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Ö–æ–¥–æ–≤, –æ–¥–Ω–∞–∫–æ —Ç–≤–æ–∏ –∫–æ–ø–ª–µ–Ω–∏—è –ø–æ—á—Ç–∏ –Ω–µ —Ä–∞—Å—Ç—É—Ç! –°—Ç–∞—Ä–∞–π—Å—è –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ö–æ—Ç—è-–±—ã 10% –æ—Ç —Å–≤–æ–∏—Ö –¥–æ—Ö–æ–¥–æ–≤, —á—Ç–æ–±—ã –∫–æ–ø–∏—Ç—å –±—ã—Å—Ç—Ä–µ–µ!\n'
            if dream is not None:
                text = text + f'üí° –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤, –¥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ *{dream[2]}* –æ—Å—Ç–∞–Ω–µ—Ç—Å—è *{math.ceil(float(dream[4]) / balance * float(((datetime.date.today() - datetime.date(2023, 1, 1)).days) - day + 1))}* –¥–Ω–µ–π\n'
        elif money_percent > 0.9:
            text = text + 'üí° –¢–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –ø–æ—á—Ç–∏ –Ω–µ —Ç—Ä–∞—Ç—è—Ç—Å—è, —ç—Ç–æ —Ö–æ—Ä–æ—à–æ, –æ–¥–Ω–∞–∫–æ –Ω–µ –±–æ–π—Å—è –∏—Ö —Ç—Ä–∞—Ç–∏—Ç—å, –≥–ª–∞–≤–Ω–æ–µ - –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ö–æ—Ç—è-–±—ã –ø–æ 10% –æ—Ç —Å–≤–æ–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ç–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ!\n'
            if dream is not None:
                text = text + f'üí° –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤, –¥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ *{dream[2]}* –æ—Å—Ç–∞–Ω–µ—Ç—Å—è *{math.ceil(float(dream[4]) / balance * float(((datetime.date.today() - datetime.date(2023, 1, 1)).days) - day + 1))}* –¥–Ω–µ–π\n'
        else:
            text = text + '‚úÖ –û—Ç–ª–∏—á–Ω–æ, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–ø–ª–µ–Ω–∏–µ–º –¥–µ–Ω–µ–≥!\n'
            if dream is not None:
                days_until_dream = math.ceil(float(dream[4]) / balance * float(((datetime.date.today() - datetime.date(2023, 1, 1)).days) - day + 1))
                if days_until_dream < 30:
                    text = text + f'üí° –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤, –¥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ *{dream[2]}* –æ—Å—Ç–∞–Ω–µ—Ç—Å—è *{days_until_dream}* –¥–Ω–µ–π\n'
                else:
                    text = text + f'üí° –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤, –¥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ *{dream[2]}* –æ—Å—Ç–∞–Ω–µ—Ç—Å—è *{days_until_dream}* –¥–Ω–µ–π. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∂–µ–ª–∞–µ–º–æ–µ –±—ã—Å—Ç—Ä–µ–µ, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ –æ—Ç —Ç–≤–æ–∏—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–æ–≤, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –¥–µ–Ω—å–≥–∏ –∫–æ–ø–∏–ª–∏—Å—å –±—ã—Å—Ç—Ä–µ–µ\n'

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∑–∞—Ç—Ä–∞—Ç
        max_value = sum(payouts.values())
        for payout in payouts:
            payouts[payout] = payouts[payout] / max_value * 100

        payouts = list(map(lambda c: {c: round(payouts[c], 1)}, payouts))

        text = text + '\n\n*–í—ã —Ç—Ä–∞—Ç–∏—Ç–µ:*\n'
        for payout in payouts:
            text = text + f'{categories[list(payout.keys())[0]]}: *{list(payout.values())[0]}%*\n'
    else:
        text = 'üò¥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤'

    return text


def dreams_formator(message, user_cache):
    try:
        if 'wish_remove_id' in user_cache.keys():
            with sqlite3.connect('users.db') as db:
                cursor = db.cursor()
                command = """
                SELECT * FROM dreams WHERE user_id = ? ORDER BY priority ASC
                """
                dreams = list(cursor.execute(command, [message.from_user.id]))
                dream_id = dreams[user_cache['wish_remove_id'] - 1][0]
                command = """
                DELETE FROM dreams WHERE id = ?
                """
                cursor.execute(command, [dream_id])
                cursor.close()
                db.commit()
        if 'wish_id' in user_cache.keys() and 'wish_priority' in user_cache.keys():
            with sqlite3.connect('users.db') as db:
                cursor = db.cursor()
                command = """
                SELECT * FROM dreams WHERE user_id = ? ORDER BY priority ASC
                """
                dreams = list(cursor.execute(command, [message.from_user.id]))
                dream_id = dreams[user_cache['wish_id'] - 1][0]
                command = """
                UPDATE dreams SET priority = ? WHERE id = ?
                """
                cursor.execute(command, [user_cache['wish_priority'] - 1, dream_id])
                cursor.close()
                db.commit()
        if 'wish_cost' in user_cache.keys() and 'wish_name' in user_cache.keys():
            with sqlite3.connect('users.db') as db:
                cursor = db.cursor()
                command = """
                INSERT INTO dreams (user_id, dream, date, cost, priority) VALUES (?, ?, ?, ?, 0)
                """
                cursor.execute(command, [message.from_user.id,
                                         user_cache['wish_name'],
                                         time.strftime('%m.%Y'),
                                         user_cache['wish_cost']])
                cursor.close()
                db.commit()
    finally:
        try:
            del user_cache['wish_remove_id']
        except KeyError:
            pass

        try:
            del user_cache['wish_id']
            del user_cache['wish_priority']
        except KeyError:
            pass

        try:
            del user_cache['wish_name']
            del user_cache['wish_cost']
        except KeyError:
            pass
        text = 'ü§î –≠—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∂–µ–ª–∞–Ω–∏–π. –ò—Å—Ö–æ–¥—è –∏–∑ –Ω–µ–≥–æ, –≤–∫–ª–∞–¥–∫–∞ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã" –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω —Ä–∞—Å—Ö–æ–¥–æ–≤, —á—Ç–æ–±—ã —Ç–≤–æ—ë –∂–µ–ª–∞–Ω–∏–µ –ø–æ—Å–∫–æ—Ä–µ–µ –æ—Å—É—â–µ—Å—Ç–≤–∏–ª–æ—Å—å. –ñ–µ–ª–∞–Ω–∏–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç –æ–±—ã—á–Ω–æ–π –∂–µ–≤–∞—á–∫–∏ –¥–æ –Ω–æ–≤–æ–≥–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞.\n\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∂–µ–ª–∞–Ω–∏—è - —Ç–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–∫–æ—Ä–æ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —ç—Ç–∞ –≤–µ—â—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥—Ä—É–≥–∏—Ö –∂–µ–ª–∞–Ω–∏–π. –ß–µ–º –≤—ã—à–µ –º–µ—Å—Ç–æ (–º–µ–Ω—å—à–µ —á–∏—Å–ª–æ), —Ç–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–π –æ–Ω–æ –±—É–¥–µ—Ç.\n\n'
        with sqlite3.connect('users.db') as db:
            cursor = db.cursor()
            command = """
            SELECT * FROM dreams WHERE user_id = ? ORDER BY priority ASC
            """
            dreams = list(cursor.execute(command, [message.from_user.id]))
            cursor.close()
        if len(dreams) > 0:
            index = 0
            for dream in dreams:
                text = text + f'*{index + 1}. {dream[2]}*\n'
                text = text + f'- –°—Ç–æ–∏–º–æ—Å—Ç—å: *{dream[4]}* —Ä—É–±–ª–µ–π\n'
                text = text + f'- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: *{dream[5] + 1}* –º–µ—Å—Ç–æ\n'
                text = text + '\n'
                index += 1
        else:
            text = text + 'üòØ –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç!'

    return text
