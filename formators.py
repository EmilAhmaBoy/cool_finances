import time
import sqlite3


categories = {
    'transaction_category_job': 'üíº –†–∞–±–æ—Ç–∞',
    'transaction_category_gift': 'üéÅ –ü–æ–¥–∞—Ä–æ–∫',
    'transaction_category_pocket_money': 'üìî –ö–∞—Ä–º–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏',
    'transaction_category_win': 'üí∏ –í—ã–∏–≥—Ä—ã—à / –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥',
    'transaction_category_entertainment': 'üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
    'transaction_category_food': 'üçî –ï–¥–∞',
    'transaction_category_knowledges': 'üéì –£—á—ë–±–∞',
    'transaction_category_item': 'üö≤ –í–µ—â—å'
}

def earnings_formator(message, user_cache):
    try:
        if 'category' in user_cache.keys():
            with sqlite3.connect('users.db') as db:
                cursor = db.cursor()
                command = """
                INSERT INTO transactions (user_id, cost, date, category) VALUES (?, ?, ?, ?)
                """
                cursor.execute(command, [message.from_user.id,
                                         user_cache['cost'] * user_cache['multy'],
                                         time.strftime('%m.%Y'),
                                         user_cache['category']])
                cursor.close()
                db.commit()
    finally:
        try:
            del user_cache['multy']
            del user_cache['cost']
            del user_cache['category']
        finally:
            with sqlite3.connect('users.db') as db:
                cursor = db.cursor()
                transactions = list(cursor.execute('SELECT * FROM transactions WHERE user_id = ? AND date = ?', [message.from_user.id, time.strftime('%m.%Y')]))
                cursor.close()

            if len(transactions) > 0:
                text = 'üßê –í—Å–µ –≤–∞—à–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ç—É—Ç:\n\n'
                money = 0
                index = 0
                for transaction in transactions:
                    money += transaction[2]
                    if transaction[2] > 0:
                        text = text + f'*{index + 1}.* üìà –î–æ—Ö–æ–¥ –Ω–∞ —Å—É–º–º—É –≤ *{str(transaction[2])}* —Ä—É–±.'
                    else:
                        text = text + f'*{index + 1}.* üìâ –†–∞—Å—Ö–æ–¥ –Ω–∞ —Å—É–º–º—É –≤ *{str(- transaction[2])}* —Ä—É–±.'
                    text = text + f' ({categories[transaction[4]]})\n'
                    index += 1
                text = text + f'\n\nüòâ –ò—Ç–æ–≥–æ: _—É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å_ *{str(money)}* _—Ä—É–±–ª–µ–π_'
            else:
                text = '–ò—Å—Ç–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—É—Å—Ç–∞ üò•'

            return text


def transaction_formator(message, user_cache):
    text = 'ü§ù –ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥, –≤—Ö–æ–¥—è—â–∏—Ö –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.'

    if message.text == 'üìâ –í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥':
        user_cache['multy'] = -1
    else:
        user_cache['multy'] = 1

    return text


def transaction_category_formator(message, user_cache):
    if user_cache['multy'] == 1:
        buttons = ['transaction_category_job',
                   'transaction_category_gift',
                   'transaction_category_pocket_money',
                   'transaction_category_win']
    else:
        buttons = ['transaction_category_entertainment',
                   'transaction_category_food',
                   'transaction_category_knowledges',
                   'transaction_category_item']

    buttons.append('transaction_back')

    return buttons


def analyse_formator(message, user_cache):
    with sqlite3.connect('users.db') as db:
        cursor = db.cursor()
        command = """
        SELECT * FROM transactions WHERE user_id = ? AND date = ?
        """
        transactions = list(cursor.execute(command, [message.from_user.id, time.strftime('%m.%Y')]))
        cursor.close()

    if len(transactions) > 5:
        balance = 0
        all_money = 0
        for transaction in transactions:
            balance += transaction[2]
            all_money += abs(transaction[2])

        if balance / all_money > 0.1:
            text = 'üòÑ –í—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ!'
        else:
            text = 'üòï –í—ã —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç—Ä–∞—Ç–∏—Ç–µ! –ß—Ç–æ–±—ã –∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ö–æ—Ç—è-–±—ã –ø–æ 10% –æ—Ç —Å–≤–æ–µ–≥–æ –¥–æ—Ö–æ–¥–∞.'

    else:
        text = 'üò¥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤'

    return text


def dreams_formator(message, user_cache):
    with sqlite3.connect('users.db') as db:
        cursor = db.cursor()
        command = """
        SELECT * FROM dreams WHERE user_id = ?
        """
        transactions = list(cursor.execute(command, [message.from_user.id]))
        cursor.close()
    if len(transactions) > 0:
        print('')
        # —Ç—É—Ç —á—Ç–æ-—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
    else:
        text = 'üòØ –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—É—Å—Ç!'

    return text
