# -*- coding: utf-8 -*-
import sqlite3

import telebot
from telebot import types

import formators as form

users_cache = {}

db_sql = sqlite3.connect('users.db')
cursor_sql = db_sql.cursor()

command_sql = """
CREATE TABLE IF NOT EXISTS users (
    id biginteger primary key,
    username text,
    first_name text,
    last_name text
);

CREATE TABLE IF NOT EXISTS transactions (
    id integer primary key,
    user_id biginteger,
    cost real,
    date text,
    category text
);

CREATE TABLE IF NOT EXISTS dreams (
    id integer primary key,
    user_id biginteger,
    dream text,
    date text,
    cost integer,
    priority integer
);
"""
cursor_sql.executescript(command_sql)
db_sql.commit()
cursor_sql.close()
root = {
    'pages': {
        'start': {
            'name': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
            'content': 'üòú –ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫! üí™ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–∞—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –∏ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–≤–æ–∏—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤! üòÑ',
            'buttons': ['start'],
            'inline_buttons': [],
            'inline_name': None,
            'inline_content': None
        },
        'not_found': {
            'name': '–û–π...',
            'content': 'üòü –ú—ã —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, —á—Ç–æ–±—ã —Ç–∞–∫–æ–≥–æ –Ω–µ —Å–ª—É—á–∞–ª–æ—Å—å.',
            'buttons': ['ok_sorry'],
            'inline_buttons': [],
            'inline_name': None,
            'inline_content': None
        },
        'main': {
            'name': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫',
            'content': 'ü§® –ß—Ç–æ —Ç–µ–±—è —Å—é–¥–∞ –ø—Ä–∏–≤–µ–ª–æ?',
            'buttons': ['learn', 'count'],
            'inline_buttons': [],
            'inline_name': None,
            'inline_content': None
        },
        'learn': {
            'name': '–£—Ä–æ–∫–∏ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏',
            'content': 'üòâ –ò–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞, –≤—ã–±–µ—Ä–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è',
            'buttons': ['learn_finance', 'learn_save_money', 'main_back'],
            'inline_buttons': [],
            'inline_name': None,
            'inline_content': None
        },
        'lesson_finance': {
            'name': '–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å?',
            'content': '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å - —ç—Ç–æ —É–º–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏—Ç—å –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–≤–æ–∏ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è, –∞ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–≤–æ—ë –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏.\n\n–§–∏–Ω–∞–Ω—Å–æ–≤–æ –≥—Ä–∞–º–æ—Ç–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—Ç, –∫—Ç–æ —É–º–µ–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å–æ —Å–≤–æ–∏–º –∏–º—É—â–µ—Å—Ç–≤–æ–º –∏ –¥–µ–Ω—å–≥–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –∑–Ω–∞–µ—Ç –∫–∞–∫ —Ç—Ä–∞—Ç–∏—Ç—å –∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–µ–Ω—å–≥–∏.\n\n–ù–∞–¥–µ—é—Å—å –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Å—Ç–∞—Ç—å—è üòâ',
            'buttons': ['learn_back'],
            'inline_buttons': [],
            'inline_name': None,
            'inline_content': None
        },
        'lesson_save_money': {
            'name': '–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏?',
            'content': '–•–æ—á–µ—à—å –∫—É–ø–∏—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥? –¢–æ–≥–¥–∞ –Ω–∞—á–Ω–∏ –∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é —Å—É–º–º—É, –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Ç–æ–±–æ–π, –≤ –∫–æ–ø–∏–ª–∫—É. –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤ –Ω–µ–π –Ω–∞–±–µ—Ä—ë—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.\n\n–ö –ø—Ä–∏–º–µ—Ä—É, —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å –≤–µ–ª–æ—Å–ø–µ–¥, –æ–Ω —Å—Ç–æ–∏—Ç 5000 —Ä—É–±–ª–µ–π. –†–æ–¥–∏—Ç–µ–ª–∏ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –¥–∞—é—Ç —Ç–µ–±–µ 1500 —Ä—É–±–ª–µ–π –≤ –∫–∞—Ä–º–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏, –∞ –ø–æ—Å–ª–µ —à–∫–æ–ª—ã —Ç—ã —Ö–æ–¥–∏—à—å –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É, –≥–¥–µ —Ç–µ–±–µ –ø–ª–∞—Ç—è—Ç 500 —Ä—É–±–ª–µ–π –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å —Ä–∞–±–æ—Ç—ã. –¢–æ –µ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 500 √ó 7 = 3500 —Ä—É–±–ª–µ–π. –°–∫–ª–∞–¥—ã–≤–∞–µ–º —Å –∫–∞—Ä–º–∞–Ω–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏: –ø–æ–ª—É—á–∞–µ—Ç—Å—è 3500 + 1500 = 5000 —Ä—É–±–ª–µ–π. –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º 500 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–∏–ª–∫—É. –ò –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å–ª–∏ –º—ã –ø–æ–¥–µ–ª–∏–º —Ü–µ–Ω—É –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –Ω–∞ 500 —Ä—É–±–ª–µ–π, —Ç–æ –º—ã –ø–æ–ª—É—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥ –±—É–¥—É—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω—ã. 5000 √∑ 500 = 10 –Ω–µ–¥–µ–ª—å. –ó–Ω–∞—á–∏—Ç, –æ—Ç–∫–ª–∞–¥—ã–≤–∞—è –ø–æ 10% –≤ –º–µ—Å—è—Ü, –º—ã —Å–º–æ–∂–µ–º –∫—É–ø–∏—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥ —É–∂–µ —á–µ—Ä–µ–∑ 10 –Ω–µ–¥–µ–ª—å (2 —Å —á–µ–º-—Ç–æ –º–µ—Å—è—Ü–∞).\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏!\n\n–ù–∞–¥–µ—é—Å—å –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Å—Ç–∞—Ç—å—è üòâ',
            'buttons': ['learn_back'],
            'inline_buttons': [],
            'inline_name': None,
            'inline_content': None
        },
        'earnings': {
            'name': '–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã',
            'content': form.earnings_formator,
            'buttons': ['pay-in', 'pay-out', 'main_back'],
            'inline_buttons': ['analyse', 'dreams'],
            'inline_name': '–£—Å–ª—É–≥–∏ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º',
            'inline_content': 'ü§ó –¢–∞–∫–∂–µ –º—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —É—Å–ª—É–≥–∏ –ø–æ —Ç–≤–æ–∏–º –¥–æ—Ö–æ–¥–∞–º –∏ —Ä–∞—Å—Ö–æ–¥–∞–º'
        },
        'transaction': {
            'name': '–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ',
            'content': form.transaction_formator,
            'buttons': ['transaction_back'],
            'inline_buttons': [],
            'inline_name': None,
            'inline_content': None
        },
        'transaction_category': {
            'name': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            'content': 'ü§ù –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞',
            'buttons': form.transaction_category_formator,
            'inline_buttons': [],
            'inline_name': None,
            'inline_content': None
        },
        'analyse': {
            'name': '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã...',
            'content': form.analyse_formator,
            'buttons': ['analyse_back'],
            'inline_buttons': [],
            'inline_name': None,
            'inline_content': None
        },
        'dreams': {
            'name': '–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π',
            'content': form.dreams_formator,
            'buttons': ['wish', 'dreams_back'],
            'inline_buttons': [],
            'inline_name': None,
            'inline_content': None
        },
        'wish': {
            'name': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π',
            'content': 'ü§ù –ß—Ç–æ —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π? –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–∞–º–∏. –ù–µ –ø–∏—à–∏ –¥–ª–∏–Ω–Ω–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤.',
            'buttons': ['wish_back'],
            'inline_buttons': [],
            'inline_name': None,
            'inline_content': None
        },
        'wish_cost': {
            'name': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π',
            'content': 'ü§ù –ù–∞–ø–∏—à–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∂–µ–ª–∞–µ–º–æ–≥–æ –≤ —Ä—É–±–ª—è—Ö. –ú—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ –Ω–∞–∫–æ–ø–∏—Ç—å —ç—Ç—É —Å—É–º–º—É –¥–µ–Ω–µ–≥, –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã".',
            'buttons': ['wish_back'],
            'inline_buttons': [],
            'inline_name': None,
            'inline_content': None
        }
    },
    'buttons': {
        'start': {
            'name': 'ü§© –û–≥–æ',
            'redirect': 'main'
        },
        'ok_sorry': {
            'name': 'üòè –û–∫–µ–π',
            'redirect': 'main'
        },
        'learn': {
            'name': 'ü§ë –Ø –±—ã —Ö–æ—Ç–µ–ª –ø–æ–±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏',
            'redirect': 'learn'
        },
        'count': {
            'name': 'ü§ì –Ø –±—ã —Ö–æ—Ç–µ–ª –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã',
            'redirect': 'earnings'
        },
        'learn_finance': {
            'name': 'üíµ –ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å?',
            'redirect': 'lesson_finance'
        },
        'learn_save_money': {
            'name': 'üíµ –ö–∞–∫ –Ω–∞—á–∞—Ç—å –∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏?',
            'redirect': 'lesson_save_money'
        },
        'learn_back': {
            'name': 'üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
            'redirect': 'learn'
        },
        'main_back': {
            'name': '‚Ü©Ô∏è –ù–∞–∑–∞–¥',
            'redirect': 'main'
        },
        'pay-in': {
            'name': 'üìà –í–Ω–µ—Å—Ç–∏ –¥–æ—Ö–æ–¥',
            'redirect': 'transaction'
        },
        'pay-out': {
            'name': 'üìâ –í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥',
            'redirect': 'transaction'
        },
        'transaction_back': {
            'name': '‚ùå –û—Ç–º–µ–Ω–∞',
            'redirect': 'earnings'
        },
        'transaction_category_entertainment': {
            'name': 'üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
            'redirect': 'earnings'
        },
        'transaction_category_food': {
            'name': 'üçî –ï–¥–∞',
            'redirect': 'earnings'
        },
        'transaction_category_knowledges': {
            'name': 'üéì –£—á—ë–±–∞',
            'redirect': 'earnings'
        },
        'transaction_category_item': {
            'name': 'üö≤ –í–µ—â—å',
            'redirect': 'earnings'
        },
        'transaction_category_job': {
            'name': 'üíº –†–∞–±–æ—Ç–∞',
            'redirect': 'earnings'
        },
        'transaction_category_gift': {
            'name': 'üéÅ –ü–æ–¥–∞—Ä–æ–∫',
            'redirect': 'earnings'
        },
        'transaction_category_pocket_money': {
            'name': 'üìî –ö–∞—Ä–º–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏',
            'redirect': 'earnings'
        },
        'transaction_category_win': {
            'name': 'üí∏ –í—ã–∏–≥—Ä—ã—à / –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥',
            'redirect': 'earnings'
        },
        'analyse_back': {
            'name': 'üòÖ –•–æ—Ä–æ—à–æ',
            'redirect': 'earnings'
        },
        'dreams_back': {
            'name': '‚Ü©Ô∏è –í—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–Ω–∏–π',
            'redirect': 'earnings'
        },
        'wish': {
            'name': 'ü§© –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π',
            'redirect': 'wish'
        },
        'wish_back': {
            'name': 'üö´ –û—Ç–º–µ–Ω–∞',
            'redirect': 'dreams'
        }
    },
    'inline_buttons': {
        'analyse': {
            'name': '„ÄΩÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã',
            'redirect': 'analyse'
        },
        'dreams': {
            'name': '‚ú¥Ô∏è –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π',
            'redirect': 'wish'
        }
    }
}
db_sql.close()

bot = telebot.TeleBot('5742123865:AAEZU3tnVMjVR3pL4x4scKb1RF2qKHcU5MY')


def render_page(message, markup, inline_markup, page):
    if root['pages'][page]['inline_name'] is not None:
        inline_answer = f"*‚Ä¢ {root['pages'][page]['inline_name']}*\n\n{root['pages'][page]['inline_content']}"
    else:
        inline_answer = None

    answer = f"*‚Ä¢ {root['pages'][page]['name']}*\n\n"
    if isinstance(root['pages'][page]['content'], str):
        answer = answer + root['pages'][page]['content']
    else:
        answer = answer + root['pages'][page]['content'](message, users_cache[message.from_user.id])

    if isinstance(root['pages'][page]['buttons'], list):
        for button in root['pages'][page]['buttons']:
            markup.add(types.KeyboardButton(root['buttons'][button]['name']))
    else:
        for button in root['pages'][page]['buttons'](message, users_cache[message.from_user.id]):
            markup.add(types.KeyboardButton(root['buttons'][button]['name']))

    for button in root['pages'][page]['inline_buttons']:
        inline_markup.add(types.InlineKeyboardButton(text=root['inline_buttons'][button]['name'], callback_data=button))

    return {
        'answer': answer,
        'inline_answer': inline_answer
    }


@bot.message_handler(commands=['start'])
def start_message(message):
    print(message)
    db = sqlite3.connect('users.db')
    cursor = db.cursor()
    command = """
    INSERT OR IGNORE INTO users (id, username, first_name, last_name) VALUES (?, ?, ?, ?);
    """
    cursor.execute(command, [message.from_user.id,
                             message.from_user.username,
                             message.from_user.first_name,
                             message.from_user.last_name])
    db.commit()
    cursor.close()
    db.close()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    inline_markup = types.InlineKeyboardMarkup()
    render = render_page(message, markup, inline_markup, 'start')
    bot.send_message(message.chat.id, render['answer'], reply_markup=markup, parse_mode="Markdown")


@bot.message_handler(content_types=['text'])
def new_message(message):
    try:
        users_cache[message.from_user.id]
    except KeyError:
        users_cache[message.from_user.id] = {'page': None}

    page = None
    render = None
    for button in root['buttons']:
        if message.text == root['buttons'][button]['name']:
            page = root['buttons'][button]['redirect']
            break

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    inline_markup = types.InlineKeyboardMarkup()

    if page is not None:
        if users_cache[message.from_user.id]['page'] == 'transaction_category':
            if button != 'transaction_back' and button != 'ok_sorry':
                users_cache[message.from_user.id]['category'] = button
        render = render_page(message, markup, inline_markup, page)
        users_cache[message.from_user.id]['page'] = page
    elif users_cache[message.from_user.id]['page'] == 'transaction':
        try:
            float(message.text)
        except ValueError:
            bot.send_message(message.chat.id, '‚ùå –¢—ã –≤–ø–∏—Å–∞–ª –Ω–µ —á–∏—Å–ª–æ!')
        else:
            if round(float(message.text), 2) > 250000:
                bot.send_message(message.chat.id, '‚ùå –¢–∞–∫ –º–Ω–æ–≥–æ!? –ù–µ –≤–µ—Ä–∏–º!')
            else:
                if round(float(message.text), 2) < 1:
                    bot.send_message(message.chat.id, '‚ùå –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!')
                else:
                    users_cache[message.from_user.id]['cost'] = round(float(message.text), 2)
                    render = render_page(message, markup, inline_markup, 'transaction_category')
                    users_cache[message.from_user.id]['page'] = 'transaction_category'
    elif users_cache[message.from_user.id]['page'] == 'wish':
        if 32 >= len(message.text) > 1:
            users_cache[message.from_user.id]['wish_name'] = message.text
            render = render_page(message, markup, inline_markup, 'wish_cost')
            users_cache[message.from_user.id]['page'] = 'wish_cost'
        else:
            bot.send_message(message.chat.id, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤!')
    else:
        render = render_page(message, markup, inline_markup, 'not_found')

    if render is not None:
        bot.send_message(message.chat.id, render['answer'], reply_markup=markup, parse_mode="Markdown")
        if len(inline_markup.keyboard) > 0:
            bot.send_message(message.chat.id, render['inline_answer'], reply_markup=inline_markup,
                             parse_mode="Markdown")


@bot.callback_query_handler(func=lambda c: True)
def button_pressed(query):
    bot.edit_message_reply_markup(query.message.chat.id, query.message.id, reply_markup=None)
    try:
        users_cache[query.from_user.id]
    except KeyError:
        users_cache[query.from_user.id] = {'page': None}

    render = None
    page = root['inline_buttons'][query.data]['redirect']

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    inline_markup = types.InlineKeyboardMarkup()

    if page is not None:
        render = render_page(query, markup, inline_markup, page)
    else:
        render = render_page(query, markup, inline_markup, 'not_found')

    if render is not None:
        bot.send_message(query.message.chat.id, render['answer'], reply_markup=markup, parse_mode="Markdown")
        if len(inline_markup.keyboard) > 0:
            bot.send_message(query.message.chat.id, render['inline_answer'], reply_markup=inline_markup, parse_mode="Markdown")


bot.infinity_polling()
